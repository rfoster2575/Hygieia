#!/bin/bash

#update local host to bridge ip if used for a URL
DOCKER_LOCALHOST=
echo $JENKINS_MASTER|egrep localhost >>/dev/null
if [ $? -ne 1 ]
then
	#this seems to give a access to the VM of the dockermachine
	#LOCALHOST=`ip route|egrep '^default via'|cut -f3 -d' '`
	#see http://superuser.com/questions/144453/virtualbox-guest-os-accessing-local-server-on-host-os
	DOCKER_LOCALHOST=10.0.2.2
	MAPPED_URL=`echo "$JENKINS_MASTER"|sed "s|localhost|$DOCKER_LOCALHOST|"`
	echo "Mapping localhost -> $MAPPED_URL"
	JENKINS_MASTER=$MAPPED_URL	
fi

cat > $PROP_FILE <<EOF
#Database Name
dbname=${HYGIEIA_API_ENV_SPRING_DATA_MONGODB_DATABASE:-dashboarddb}

#Database HostName - default is localhost
dbhost=${MONGODB_HOST:-10.0.1.1}

#Database Port - default is 27017
dbport=${MONGODB_PORT:-27017}

#Database Username - default is blank
dbusername=${HYGIEIA_API_ENV_SPRING_DATA_MONGODB_USERNAME:-dashboarduser}

#Database Password - default is blank
dbpassword=${HYGIEIA_API_ENV_SPRING_DATA_MONGODB_PASSWORD:-dbpassword}

#Collector schedule (required)
jenkins-vulnerability.cron=${JENKINS_CRON:-0 0/5 * * * *}

#If using username/token for api authentication (required for Cloudbees Jenkins Ops Center) see sample
#jenkins-vulnerability.servers[1]=${JENKINS_OP_CENTER:-http://username:token@jenkins.company.com}
#jenkins-vulnerability.servers[1]=${JENKINS_OP_CENTER}

#Another option: If using same username/password Jenkins auth - set username/apiKey to use HTTP Basic Auth (blank=no auth)
jenkins-vulnerability.username=${JENKINS_USERNAME}
jenkins-vulnerability.apiKey=${JENKINS_API_KEY}

#Determines if build console log is collected - defaults to false
jenkins-vulnerability.saveLog=${JENKINS_SAVE_LOG:-true}

# note: failed builds will not be picked up, the collector looks for lastSucessfulArtifacts

# Collector types (not required, but regex should match only the type specified)
jenkins-vulnerability.artifactRegex.owasp=dependency-check-report.xml
jenkins-vulnerability.artifactRegex.retirejs=retirejs-report.json

jenkins-vulnerability.jobDepth=1

#map the entry localhost so URLS in jenkins resolve properly
# Docker NATs the real host localhost to 10.0.2.2 when running in docker
# as localhost is stored in the JSON payload from jenkins we need
# this hack to fix the addresses
jenkins-vulnerability.dockerLocalHostIP=${DOCKER_LOCALHOST}

#jenkins-vulnerability.servers[0]=https://jenkins-devops.apps.pecos-devops2.cpi.cmscloud.local/job/CPI-PECOS-Dev/job/application/

EOF

# find how many jenkins urls are configured
max=$(wc -w <<< "${!JENKINS_MASTER_URL*}")

# loop over and output the url
i=0
while [ $i -lt $max ]
do
	if [ $i -eq 0 ]
	then
		server="JENKINS_MASTER_URL"
	else
		server="JENKINS_MASTER_URL$i"
	fi
	
cat >> $PROP_FILE <<EOF
jenkins-vulnerability.servers[${i}]=${!server}
EOF
	i=$(($i+1))
done

echo "

===========================================
Properties file created `date`:  $PROP_FILE
Note: passwords & apiKey hidden
Master URLs Defined: $(wc -w <<< "${!JENKINS_MASTER_URL*}")
===========================================
`cat $PROP_FILE |egrep -vi 'password|apiKey'`
"

exit 0
