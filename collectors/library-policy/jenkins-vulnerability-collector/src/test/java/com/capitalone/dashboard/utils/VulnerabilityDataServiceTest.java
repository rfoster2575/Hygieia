package com.capitalone.dashboard.utils;

import com.capitalone.dashboard.model.vulnerability.JenkinsBuild;
import com.capitalone.dashboard.model.vulnerability.JenkinsJob;
import com.capitalone.dashboard.model.vulnerability.JenkinsVulnerabilityJob;

import com.capitalone.dashboard.model.vulnerability.JobContainer;
import com.capitalone.dashboard.model.vulnerability.Artifact;
import com.capitalone.dashboard.model.vulnerability.JenkinsSettings;

import com.capitalone.dashboard.repository.LibraryPolicyResultsRepository;
import org.bson.types.ObjectId;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

import java.util.HashMap;
import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.same;
import static org.mockito.Mockito.*;

public class VulnerabilityDataServiceTest {

    private LibraryPolicyResultsRepository mockLibraryPolicyResultsRepository;
    private VulnerabilityDataService testee;

    @Before
    public void setup() {
        this.mockLibraryPolicyResultsRepository = mock(LibraryPolicyResultsRepository.class);
        this.testee = new VulnerabilityDataService(mockLibraryPolicyResultsRepository);
    }


    // @Test
    // public void doesNotRecordJobIfLastStoredJobTimestampIsSameAsCurrent() throws Exception {

    // 	JenkinsVulnerabilityJob dbJob = JenkinsVulnerabilityJob.newBuilder().jenkinsServer("http://buildserver2/job1").build();
    //     ObjectId dbJobId = new ObjectId();
    //     dbJob.setId(dbJobId);

    //     String testXmlReport = new String();
    //     List<String> testXmlReports = Arrays.asList(testXmlReport);

    //     LibraryPolicyResult storedPolicyResult = mock(LibraryPolicyResult.class);

    //     when(mockLibraryPolicyResultsRepository.findByCollectorItemIdAndTimestamp(same(dbJobId), eq(10L))).thenReturn(
    //     		storedPolicyResult
    //     );

    //     VulnerabilityVisitor mockVisitor = mock(VulnerabilityVisitor.class);
    //     when(mockVulnerabilityConverter.produceVisitor()).thenReturn(mockVisitor);
    //     LibraryPolicyResult fakePolicyRsult = new LibraryPolicyResult();
    //     when(mockVisitor.produceResult()).thenReturn(fakePolicyRsult);

    //     JenkinsJob job = JenkinsJob.newBuilder().jobName("job1").lastSuccessfulBuild(
    //             JenkinsBuild.newBuilder().timestamp(10L).build()).build();

    //     //test
    //     this.testee.storeJob(job, dbJob, testXmlReports);

    //     //asserts
    //     verify(mockLibraryPolicyResultsRepository, times(0)).save(any(LibraryPolicyResult.class));
    // }

    @Test
    public void doesNothingIfNoJob() {
        JenkinsJob job = JenkinsJob.newBuilder().jobName("job1").build();
        this.testee.storeLibraryPolicy(job, null, new HashMap<>());

        verifyNoMoreInteractions(mockLibraryPolicyResultsRepository);
    }

    @Test
    public void copesWithNoXMLReports() {
    	JenkinsVulnerabilityJob dbJob = JenkinsVulnerabilityJob.newBuilder().jenkinsServer("http://buildserver2/job1").build();
        ObjectId dbJobId = new ObjectId();
        dbJob.setId(dbJobId);

        JenkinsJob job = JenkinsJob.newBuilder().jobName("job1").build();
        this.testee.storeLibraryPolicy(job, dbJob, new HashMap<>());
        
        verifyNoMoreInteractions(mockLibraryPolicyResultsRepository);

    }

    @Test
    public void copesWithEmptyListOfXmlReports() {
    	JenkinsVulnerabilityJob dbJob = JenkinsVulnerabilityJob.newBuilder().jenkinsServer("http://buildserver2/job1").build();
        ObjectId dbJobId = new ObjectId();
        dbJob.setId(dbJobId);

        JenkinsJob job = JenkinsJob.newBuilder().jobName("job1").build();
        this.testee.storeLibraryPolicy(job, dbJob, new HashMap<>());
        
        verifyNoMoreInteractions(mockLibraryPolicyResultsRepository);
    }

//    @Test
//    public void handlesReportsWithJunitAndFindBugs() {
//        JenkinsCodeQualityJob dbJob = JenkinsCodeQualityJob.newBuilder().jenkinsServer("http://buildserver2/job1").build();
//        ObjectId dbJobId = new ObjectId();
//        dbJob.setId(dbJobId);
//
//        List<CodeQualityVisitee> reportList = new ArrayList<>();
//        // give it a junit report
//        JunitXmlReport testXmlReport = new JunitXmlReport();
//        testXmlReport.setErrors(10);
//        testXmlReport.setFailures(1);
//        testXmlReport.setTests(25);
//        reportList.add(testXmlReport);
//        // and a findbugs report
//        FindBugsXmlReport bugsXmlReport = new FindBugsXmlReport();
//        reportList.add(bugsXmlReport);
//
//        CodeQualityVisitor mockVistor = mock(CodeQualityVisitor.class);
//        when(mockCodeQualityConverter.produceVisitor()).thenReturn(mockVistor);
//
//        CodeQuality fakeReturn = new CodeQuality();
//        when(mockVistor.produceResult()).thenReturn(fakeReturn);
//
//        JenkinsJob job = JenkinsJob.newBuilder().jobName("job1").lastSuccessfulBuild(JenkinsBuild.newBuilder().timestamp(14000).build()).build();
//        this.testee.storeJob(job, dbJob, reportList);
//
//        verify(mockVistor).visit(same(testXmlReport));
//        verify(mockVistor).visit(same(testXmlReport));
//
//        ArgumentCaptor<CodeQuality> captor = ArgumentCaptor.forClass(CodeQuality.class);
//        verify(mockCodeQualityRepository).save(captor.capture());
//        CodeQuality capturedValue = captor.getValue();
//        assertThat(capturedValue.getName()).isEqualTo("job1");
//        assertThat(capturedValue.getTimestamp()).isEqualTo(14000);
//        assertThat(capturedValue.getType()).isEqualTo(CodeQualityType.StaticAnalysis);
//        assertThat(capturedValue.getUrl()).isEqualTo("http://buildserver2/job1");
//        assertThat(capturedValue.getCollectorItemId()).isSameAs(dbJobId);
//    }

}